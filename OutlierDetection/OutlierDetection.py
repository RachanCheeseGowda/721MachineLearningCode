# -*- coding: utf-8 -*-
"""721Part1.ipynb

#Hi Sir, this .py file was initially a .ipynb file on Google colab that I wrote.
#I would highly recommend you check our the notebook instead of this
#particular .py script. - Rachan

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WdFYYyUROxUYZYpCRJYde95L8pr8JDBD
"""

#from google.colab import drive
import pandas as pd
#drive.mount('/content/gdrive')

"""# Player Playoffs CSV"""

df_unfiltered = pd.read_csv("ProcessedData/player_playoffs.csv")
df_unfiltered = df_unfiltered.fillna(0)
df_unfiltered

df = df_unfiltered.iloc[:,7:23]
df

from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

def perform_PCA(df):
    x = StandardScaler().fit_transform(df)
    pca = PCA(n_components=2)
    principalComponents = pca.fit_transform(x)
    principalDf = pd.DataFrame(data = principalComponents
             , columns = ['principal component 1', 'principal component 2'])
    return principalDf

# import libraries
import numpy as np
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt

principalDf = perform_PCA(df)
# create arrays
X = principalDf.values
# instantiate model
nbrs = NearestNeighbors(n_neighbors = 3)# fit model
nbrs.fit(X)
# distances and indexes of k-neaighbors from model outputs
distances, indexes = nbrs.kneighbors(X)# plot mean of k-distances of each observation
#plt.plot(distances.mean(axis =1))

# visually determine cutoff values
player_playoffs_outlier_index = np.where(distances.mean(axis = 1) > 0.6)
outlier_values = principalDf.iloc[player_playoffs_outlier_index]
# plot outlier values
plt.scatter(principalDf["principal component 1"],principalDf["principal component 2"], color = "r")
plt.scatter(outlier_values["principal component 1"],outlier_values["principal component 2"], color = "b")
plt.show()

df_unfiltered.iloc[outlier_values.sort_values(by=['principal component 1', 'principal component 2'], ascending=False).index]

"""# Player Playoffs Career CSV

"""

df_unfiltered = pd.read_csv("ProcessedData/player_playoffs_career.csv")
df_unfiltered = df_unfiltered.fillna(0)
df_unfiltered

df = df_unfiltered.iloc[:,4:21]
df

from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

def perform_PCA(df):
    x = StandardScaler().fit_transform(df)
    pca = PCA(n_components=2)
    principalComponents = pca.fit_transform(x)
    principalDf = pd.DataFrame(data = principalComponents
             , columns = ['principal component 1', 'principal component 2'])
    return principalDf

# import libraries
import numpy as np
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt

principalDf = perform_PCA(df)
# create arrays
X = principalDf.values
# instantiate model
nbrs = NearestNeighbors(n_neighbors = 3)# fit model
nbrs.fit(X)
# distances and indexes of k-neaighbors from model outputs
distances, indexes = nbrs.kneighbors(X)# plot mean of k-distances of each observation
#plt.plot(distances.mean(axis =1))

# visually determine cutoff values
player_playoffs_career_outlier_index = np.where(distances.mean(axis = 1) > 0.6)
outlier_values = principalDf.iloc[player_playoffs_career_outlier_index]
# plot outlier values
plt.scatter(principalDf["principal component 1"],principalDf["principal component 2"], color = "r")
plt.scatter(outlier_values["principal component 1"],outlier_values["principal component 2"], color = "b")
plt.show()

df_unfiltered.iloc[outlier_values.sort_values(by=['principal component 1', 'principal component 2'], ascending=False).index]

"""# Player Regular Season CSV"""

df_unfiltered = pd.read_csv("ProcessedData/player_regular_season.csv")
df_unfiltered = df_unfiltered.fillna(0)
df_unfiltered

df = df_unfiltered.iloc[:,7:23]
df

from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

def perform_PCA(df):
    x = StandardScaler().fit_transform(df)
    pca = PCA(n_components=2)
    principalComponents = pca.fit_transform(x)
    principalDf = pd.DataFrame(data = principalComponents
             , columns = ['principal component 1', 'principal component 2'])
    return principalDf

# import libraries
import numpy as np
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt

principalDf = perform_PCA(df)
# create arrays
X = principalDf.values
# instantiate model
nbrs = NearestNeighbors(n_neighbors = 3)# fit model
nbrs.fit(X)
# distances and indexes of k-neaighbors from model outputs
distances, indexes = nbrs.kneighbors(X)# plot mean of k-distances of each observation
#plt.plot(distances.mean(axis =1))

# visually determine cutoff values
player_regular_season_outlier_index = np.where(distances.mean(axis = 1) > 0.5)
outlier_values = principalDf.iloc[player_regular_season_outlier_index]
# plot outlier values
plt.scatter(principalDf["principal component 1"],principalDf["principal component 2"], color = "r")
plt.scatter(outlier_values["principal component 1"],outlier_values["principal component 2"], color = "b")
plt.show()
df_unfiltered.iloc[outlier_values.sort_values(by=['principal component 1', 'principal component 2'], ascending=False).index]

"""# Player Regular Season Career CSV

"""

df_unfiltered = pd.read_csv("ProcessedData/player_regular_season_career.csv")
df_unfiltered = df_unfiltered.fillna(0)
df_unfiltered

df = df_unfiltered.iloc[:,4:21]
df

from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

def perform_PCA(df):
    x = StandardScaler().fit_transform(df)
    pca = PCA(n_components=2)
    principalComponents = pca.fit_transform(x)
    principalDf = pd.DataFrame(data = principalComponents
             , columns = ['principal component 1', 'principal component 2'])
    return principalDf

# import libraries
import numpy as np
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt

principalDf = perform_PCA(df)
# create arrays
X = principalDf.values
# instantiate model
nbrs = NearestNeighbors(n_neighbors = 3)# fit model
nbrs.fit(X)
# distances and indexes of k-neaighbors from model outputs
distances, indexes = nbrs.kneighbors(X)# plot mean of k-distances of each observation
#plt.plot(distances.mean(axis =1))

# visually determine cutoff values
player_regular_season_career_outlier_index = np.where(distances.mean(axis = 1) > 0.5)
outlier_values = principalDf.iloc[player_regular_season_career_outlier_index]
# plot outlier values
plt.scatter(principalDf["principal component 1"],principalDf["principal component 2"], color = "r")
plt.scatter(outlier_values["principal component 1"],outlier_values["principal component 2"], color = "b")
plt.show()

df_unfiltered.iloc[outlier_values.sort_values(by=['principal component 1', 'principal component 2'], ascending=False).index]